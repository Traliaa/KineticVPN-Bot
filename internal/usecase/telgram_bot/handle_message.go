package telgram_bot

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

//// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
//func (b *BotService) HandleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
//	chatID := message.Chat.ID
//	text := strings.ToLower(message.Text)
//
//	var responseText string
//
//	// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
//	switch {
//	case strings.Contains(text, "–ø—Ä–∏–≤–µ—Ç") || strings.Contains(text, "hello"):
//		responseText = "–ü—Ä–∏–≤–µ—Ç! üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."
//	case strings.Contains(text, "—Å–ø–∞—Å–∏–±–æ") || strings.Contains(text, "thanks"):
//		responseText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
//	default:
//		responseText = "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
//	}
//
//	msg := tgbotapi.NewMessage(chatID, responseText)
//	if _, err := bot.Send(msg); err != nil {
//		log.Printf("Error sending message: %v", err)
//	}
//}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
func (b *BotService) HandleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	if _, exists := UserSession[chatID]; !exists {
		UserSession[chatID] = &UserData{Step: "start"}
	}

	user := UserSession[chatID]

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		switch message.Command() {
		case "start":
			sendWelcomeMessage(bot, chatID, user)
		case "help":
			sendHelpMessage(bot, chatID)
		case "reset":
			delete(UserSession, chatID)
			UserSession[chatID] = &UserData{Step: "start"}
			sendWelcomeMessage(bot, chatID, UserSession[chatID])
		}
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	switch user.Step {
	case "ask_setup":
		b.handleSetupResponse(bot, message, user)
	case "router_url":
		handleRouterURL(bot, message, user)
	case "username":
		handleUsername(bot, message, user)
	case "password":
		handlePassword(bot, message, user)
	case "auth_code":
		handleAuthCode(bot, message, user)
	default:
		sendMainMenu(bot, chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:")
	}
}

// UserData —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserData struct {
	RouterURL    string   `json:"router_url"`
	Username     string   `json:"username"`
	Password     string   `json:"password"`
	AuthCode     string   `json:"auth_code"`
	SelectedApps []string `json:"selected_apps"`
	Step         string   `json:"step"`
}

// UserSession —Ö—Ä–∞–Ω–∏—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
var UserSession = make(map[int64]*UserData)
