package telgram_bot

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"

	"github.com/Traliaa/KineticVPN-Bot/internal/texts"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
func (b *BotService) HandleCallbackQuery(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery) {
	chatID := callbackQuery.Message.Chat.ID
	data := callbackQuery.Data

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	if _, exists := UserSession[chatID]; !exists {
		UserSession[chatID] = &UserData{Step: "start"}
	}

	user := UserSession[chatID]
	if user == nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
		UserSession[chatID] = &UserData{Step: "start"}
		user = UserSession[chatID]
	}

	switch {
	case data == "btn_setup_now":
		b.askRouterURL(context.Background(), bot, chatID, user)
	case data == "btn_setup_later":
		sendMainMenu(bot, chatID, "–•–æ—Ä–æ—à–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
	case strings.HasPrefix(data, "service_"):
		handleServiceSelection(bot, callbackQuery, user)
	case data == "btn_save_settings":
		saveSettings(bot, chatID, user)
	case data == "btn_back_to_main":
		sendWelcomeMessage(bot, chatID, user)
	}

	// –û—Ç–≤–µ—Ç –Ω–∞ callback query
	callbackConfig := tgbotapi.NewCallback(callbackQuery.ID, "")
	bot.Send(callbackConfig)
}

func sendWelcomeMessage(bot *tgbotapi.BotAPI, chatID int64, user *UserData) {
	if user == nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ user nil
		UserSession[chatID] = &UserData{Step: "ask_setup"}
		user = UserSession[chatID]
	} else {
		user.Step = "ask_setup"
	}

	text := texts.GetTranslate(context.Background(), texts.RU, texts.WelcomeMain)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", "btn_setup_now"),
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ü–æ–∑–∂–µ", "btn_setup_later"),
		),
	)

	bot.Send(msg)
}

func (b *BotService) handleSetupResponse(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *UserData) {
	if user == nil {
		sendWelcomeMessage(bot, message.Chat.ID, nil)
		return
	}

	response := strings.ToLower(message.Text)

	if strings.Contains(response, "–¥–∞") || strings.Contains(response, "yes") || strings.Contains(response, "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å") {
		b.askRouterURL(context.Background(), bot, message.Chat.ID, user)
	} else {
		sendMainMenu(bot, message.Chat.ID, "–•–æ—Ä–æ—à–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
	}
}

func handleRouterURL(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *UserData) {
	if user == nil {
		sendWelcomeMessage(bot, message.Chat.ID, nil)
		return
	}

	user.RouterURL = message.Text
	user.Step = "username"

	text := `üë§ **–®–∞–≥ 2 –∏–∑ 5: –õ–æ–≥–∏–Ω —Ä–æ—É—Ç–µ—Ä–∞**

–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ—É—Ç–µ—Ä—É.

_–û–±—ã—á–Ω–æ —ç—Ç–æ "admin" –∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ –Ω–∞–∫–ª–µ–π–∫–µ —Ä–æ—É—Ç–µ—Ä–∞_`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func handleUsername(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *UserData) {
	if user == nil {
		sendWelcomeMessage(bot, message.Chat.ID, nil)
		return
	}

	user.Username = message.Text
	user.Step = "password"

	text := `üîê **–®–∞–≥ 3 –∏–∑ 5: –ü–∞—Ä–æ–ª—å —Ä–æ—É—Ç–µ—Ä–∞**

–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ—É—Ç–µ—Ä—É.

_–û–±—ã—á–Ω–æ —ç—Ç–æ "admin" –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–∞ –Ω–∞–∫–ª–µ–π–∫–µ —Ä–æ—É—Ç–µ—Ä–∞_`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func handlePassword(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *UserData) {
	if user == nil {
		sendWelcomeMessage(bot, message.Chat.ID, nil)
		return
	}

	user.Password = message.Text
	user.Step = "auth_code"

	text := `üîë **–®–∞–≥ 4 –∏–∑ 5: –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VPN**

–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ VPN —Å–µ—Ä–≤–∏—Å–µ.

_–≠—Ç–æ—Ç –∫–æ–¥ –≤–∞–º –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à VPN-–ø—Ä–æ–≤–∞–π–¥–µ—Ä_`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func handleAuthCode(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *UserData) {
	if user == nil {
		sendWelcomeMessage(bot, message.Chat.ID, nil)
		return
	}

	user.AuthCode = message.Text
	user.Step = "service_selection"

	askServiceSelection(bot, message.Chat.ID, user)
}

func askServiceSelection(bot *tgbotapi.BotAPI, chatID int64, user *UserData) {
	if user == nil {
		sendWelcomeMessage(bot, chatID, nil)
		return
	}

	text := `üì± **–®–∞–≥ 5 –∏–∑ 5: –í—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤**

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ VPN:

_‚úÖ - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN_
_‚ùå - –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é_

–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:`

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
	if len(user.SelectedApps) > 0 {
		text += "\n\n–í—ã–±—Ä–∞–Ω–æ: " + strings.Join(user.SelectedApps, ", ")
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = createServicesKeyboard(user.SelectedApps)

	bot.Send(msg)
}

func handleServiceSelection(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery, user *UserData) {
	if user == nil {
		return
	}

	serviceID := strings.TrimPrefix(callbackQuery.Data, "service_")
	serviceName := ServiceMap[serviceID]

	if serviceName == "" {
		return
	}

	// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞
	found := false
	for i, app := range user.SelectedApps {
		if app == serviceName {
			// –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
			user.SelectedApps = append(user.SelectedApps[:i], user.SelectedApps[i+1:]...)
			found = true
			break
		}
	}

	if !found {
		// –î–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
		user.SelectedApps = append(user.SelectedApps, serviceName)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callbackQuery.Message.Chat.ID,
		callbackQuery.Message.MessageID,
		fmt.Sprintf(`üì± **–®–∞–≥ 5 –∏–∑ 5: –í—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤**

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ VPN:

_‚úÖ - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN_
_‚ùå - –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é_

–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: %s`,
			func() string {
				if len(user.SelectedApps) == 0 {
					return "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
				}
				return strings.Join(user.SelectedApps, ", ")
			}()),
		createServicesKeyboard(user.SelectedApps),
	)
	editMsg.ParseMode = "Markdown"

	bot.Send(editMsg)
}

func createServicesKeyboard(selectedApps []string) tgbotapi.InlineKeyboardMarkup {
	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
	selectedMap := make(map[string]bool)
	for _, app := range selectedApps {
		selectedMap[app] = true
	}

	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	var currentRow []tgbotapi.InlineKeyboardButton

	for i, service := range AvailableServices {
		status := "‚ùå"
		if selectedMap[service.Name] {
			status = "‚úÖ"
		}

		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s %s", status, service.Name),
			"service_"+service.ID,
		)

		currentRow = append(currentRow, button)

		// –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		if (i+1)%3 == 0 || i == len(AvailableServices)-1 {
			rows = append(rows, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "btn_save_settings"),
	})

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", "btn_back_to_main"),
	})

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
func createServicesKeyboardGrouped(selectedApps []string) tgbotapi.InlineKeyboardMarkup {
	selectedMap := make(map[string]bool)
	for _, app := range selectedApps {
		selectedMap[app] = true
	}

	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
	socialServices := []ServiceDefinition{
		{"facebook", "Facebook"},
		{"instagram", "Instagram"},
		{"twitter", "Twitter"},
		{"vkontakte", "VKontakte"},
		{"linkedin", "LinkedIn"},
		{"pinterest", "Pinterest"},
	}

	// –ú–µ–¥–∏–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
	mediaServices := []ServiceDefinition{
		{"youtube", "YouTube"},
		{"netflix", "Netflix"},
		{"tiktok", "TikTok"},
		{"twitch", "Twitch"},
		{"spotify", "Spotify"},
		{"reddit", "Reddit"},
	}

	// –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
	communicationServices := []ServiceDefinition{
		{"whatsapp", "WhatsApp"},
		{"telegram", "Telegram"},
		{"discord", "Discord"},
	}

	// –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	rows = append(rows, createServiceRow("üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", socialServices, selectedMap))
	rows = append(rows, createServiceRow("üé¨ –ú–µ–¥–∏–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", mediaServices, selectedMap))
	rows = append(rows, createServiceRow("üí¨ –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã", communicationServices, selectedMap))

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", "btn_select_all"),
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", "btn_clear_all"),
	})

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "btn_save_settings"),
	})

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", "btn_back_to_main"),
	})

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func createServiceRow(category string, services []ServiceDefinition, selectedMap map[string]bool) []tgbotapi.InlineKeyboardButton {
	var row []tgbotapi.InlineKeyboardButton

	for _, service := range services {
		status := "‚ùå"
		if selectedMap[service.Name] {
			status = "‚úÖ"
		}

		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s %s", status, service.Name),
			"service_"+service.ID,
		)
		row = append(row, button)
	}

	return row
}

func saveSettings(bot *tgbotapi.BotAPI, chatID int64, user *UserData) {
	if user == nil {
		sendWelcomeMessage(bot, chatID, nil)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	user.Step = "completed"

	// –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
	maskedPassword := strings.Repeat("*", len(user.Password))

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
	summary := fmt.Sprintf(`üéâ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üìã **–°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:**
‚Ä¢ üîó –†–æ—É—Ç–µ—Ä: %s
‚Ä¢ üë§ –õ–æ–≥–∏–Ω: %s
‚Ä¢ üîê –ü–∞—Ä–æ–ª—å: %s
‚Ä¢ üîë –ö–æ–¥ VPN: %s
‚Ä¢ üì± –°–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ VPN: %s

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.`,
		user.RouterURL,
		user.Username,
		maskedPassword,
		user.AuthCode,
		strings.Join(user.SelectedApps, ", "),
	)

	// –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	userJSON, _ := json.MarshalIndent(user, "", "  ")
	log.Printf("User %d settings: %s", chatID, userJSON)

	msg := tgbotapi.NewMessage(chatID, summary)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = createMainMenuKeyboard()

	bot.Send(msg)
}

func sendHelpMessage(bot *tgbotapi.BotAPI, chatID int64) {
	text := `üìñ **–ü–æ–º–æ—â—å –ø–æ VPN –ë–æ—Ç—É**

ü§î **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ë–æ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç VPN –Ω–∞ –≤–∞—à–µ–º —Ä–æ—É—Ç–µ—Ä–µ
2. –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ VPN
3. –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç—Ä–∞—Ñ–∏–∫ –∏–¥–µ—Ç –Ω–∞–ø—Ä—è–º—É—é

üîß **–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = createMainMenuKeyboard()
	bot.Send(msg)
}

func createMainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("/start"),
			tgbotapi.NewKeyboardButton("/help"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("/reset"),
		),
	)
}
